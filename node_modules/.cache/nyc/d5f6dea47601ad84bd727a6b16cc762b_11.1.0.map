{"version":3,"sources":["fetch.js"],"names":["fetchJson","url","options","requestHeaders","headers","Headers","Accept","body","FormData","set","user","authenticated","token","fetch","then","response","text","status","statusText","json","JSON","parse","e","Promise","reject","message","queryParameters","Object","keys","data","map","key","encodeURIComponent","join"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AAEO,IAAMA,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAuB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;;AAC5C,QAAMC,iBAAiBD,QAAQE,OAAR,IAAmB,IAAIC,OAAJ,CAAY;AAClDC,gBAAQ;AAD0C,KAAZ,CAA1C;AAGA,QAAI,EAAEJ,WAAWA,QAAQK,IAAnB,IAA2BL,QAAQK,IAAR,YAAwBC,QAArD,CAAJ,EAAoE;AAChEL,uBAAeM,GAAf,CAAmB,cAAnB,EAAmC,kBAAnC;AACH;AACD,QAAIP,QAAQQ,IAAR,IAAgBR,QAAQQ,IAAR,CAAaC,aAA7B,IAA8CT,QAAQQ,IAAR,CAAaE,KAA/D,EAAsE;AAClET,uBAAeM,GAAf,CAAmB,eAAnB,EAAoCP,QAAQQ,IAAR,CAAaE,KAAjD;AACH;;AAED,WAAOC,MAAMZ,GAAN,6BAAgBC,OAAhB,IAAyBE,SAASD,cAAlC,KACFW,IADE,CACG;AAAA,eAAYC,SAASC,IAAT,GAAgBF,IAAhB,CAAqB;AAAA,mBAAS;AAC5CG,wBAAQF,SAASE,MAD2B;AAE5CC,4BAAYH,SAASG,UAFuB;AAG5Cd,yBAASW,SAASX,OAH0B;AAI5CG,sBAAMS;AAJsC,aAAT;AAAA,SAArB,CAAZ;AAAA,KADH,EAOFF,IAPE,CAOG,gBAA2C;AAAA,YAAxCG,MAAwC,QAAxCA,MAAwC;AAAA,YAAhCC,UAAgC,QAAhCA,UAAgC;AAAA,YAApBd,OAAoB,QAApBA,OAAoB;AAAA,YAAXG,IAAW,QAAXA,IAAW;;AAC7C,YAAIY,aAAJ;AACA,YAAI;AACAA,mBAAOC,KAAKC,KAAL,CAAWd,IAAX,CAAP;AACH,SAFD,CAEE,OAAOe,CAAP,EAAU;AACR;AACH;AACD,YAAIL,SAAS,GAAT,IAAgBA,UAAU,GAA9B,EAAmC;AAC/B,mBAAOM,QAAQC,MAAR,CAAe,wBAAeL,QAAQA,KAAKM,OAAd,IAA0BP,UAAxC,EAAoDD,MAApD,CAAf,CAAP;AACH;AACD,eAAO,EAAEA,cAAF,EAAUb,gBAAV,EAAmBG,UAAnB,EAAyBY,UAAzB,EAAP;AACH,KAlBE,CAAP;AAmBH,CA9BM;;AAgCA,IAAMO,4CAAkB,SAAlBA,eAAkB;AAAA,WAAQC,OAAOC,IAAP,CAAYC,IAAZ,EAClCC,GADkC,CAC9B;AAAA,eAAO,CAACC,GAAD,EAAMF,KAAKE,GAAL,CAAN,EAAiBD,GAAjB,CAAqBE,kBAArB,EAAyCC,IAAzC,CAA8C,GAA9C,CAAP;AAAA,KAD8B,EAElCA,IAFkC,CAE7B,GAF6B,CAAR;AAAA,CAAxB","file":"fetch.js","sourceRoot":"/home/chen/ws_workspace/LD300-FX/src/util","sourcesContent":["import 'babel-polyfill'\nimport HttpError from './HttpError';\n\nexport const fetchJson = (url, options = {}) => {\n    const requestHeaders = options.headers || new Headers({\n        Accept: 'application/json',\n    });\n    if (!(options && options.body && options.body instanceof FormData)) {\n        requestHeaders.set('Content-Type', 'application/json');\n    }\n    if (options.user && options.user.authenticated && options.user.token) {\n        requestHeaders.set('Authorization', options.user.token);\n    }\n\n    return fetch(url, { ...options, headers: requestHeaders })\n        .then(response => response.text().then(text => ({\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers,\n            body: text,\n        })))\n        .then(({ status, statusText, headers, body }) => {\n            let json;\n            try {\n                json = JSON.parse(body);\n            } catch (e) {\n                // not json, no big deal\n            }\n            if (status < 200 || status >= 300) {\n                return Promise.reject(new HttpError((json && json.message) || statusText, status));\n            }\n            return { status, headers, body, json };\n        });\n};\n\nexport const queryParameters = data => Object.keys(data)\n    .map(key => [key, data[key]].map(encodeURIComponent).join('='))\n    .join('&');\n"]}